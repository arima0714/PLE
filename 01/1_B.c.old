/* 
B : データ数が未知の場合にデータとしてポインタによる線形リスト構造を使用した場合

a. データの入力順に総和を求めたとき
b. データ入力後に、絶対値に関して昇順に並べ替えた後に総和を求めたとき
*/

#include <stdio.h>
#include <float.h>
#include <stdlib.h>

struct node {
	double content;
	struct node *next;
};

struct node *insert_rear(double num, struct node *nodes)
{
	struct node *item;
	struct node *top;

	top = nodes;

	item = (struct node *)malloc(sizeof(struct node));
	item->content = num;
	item->next = NULL;

	if (nodes == NULL) {
		nodes = item;
		return nodes;
	}

	while (nodes->next != NULL) {
		nodes = nodes->next;
	}

	nodes->next = item;

	return top;

}

double xabs(double num)
{
	if (num < 0) {
		num = num * -1;
	}
	return num;
}

void bubble_sort(struct node *p)
{
	struct node *head;
	struct node *back;
	struct node *temp;
	double tmp = 0;
	double sum = 0;
	int i;
	int j;
	int k;
	int data_count = 0;

	head = p;

	while (p != NULL) {
		data_count++;
		p = p->next;
	}

	for (i = 0; i < data_count - 1; i++) {
		for (j = data_count - 1; j > i; j--) {
			p = head;
			for (k = 0, p = head; k < j - 1; k++) {
				p = p->next;
			}
			back = p;
			p = p->next;
			if(xabs(p->content) <= xabs(p->content)){
				tmp = p->content;
				p->content = back->content;
				back->content = tmp;
			}
		}
	}
#ifdef DEBUG
	temp = head;	
	while(temp != NULL){
		printf("num = %f\n",temp->content);
		temp = temp->next;
	}
#endif
}

double a(struct node *nodes)
{
	double answer = 0;
	struct node *temp = nodes;
	while (temp != NULL) {
		answer += temp->content;
		temp = temp->next;
	}
	return answer;
}

double b(struct node *nodes)
{
	double answer = 0;
	bubble_sort(nodes);

	return answer;
}

int main(void)
{
	char buf[128];
	double input;
	struct node *list;
	int i;

	i = 0;
	list = NULL;

	while (fgets(buf, sizeof(buf), stdin) != NULL) {
		sscanf(buf, "%le", &input);
#ifdef DEBUG
		printf("%f\n", input);
#endif
		list = insert_rear(input, list);
		i++;
	}
	printf("a() = %f\n", a(list));
	printf("b() = %f\n", b(list));
	return 0;
}

/*
参考URL : https://daeudaeu.com/programming/c-language/list-structure/

   */
